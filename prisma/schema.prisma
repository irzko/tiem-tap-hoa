generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  categoryId       String     @id @default(uuid())
  categoryName     String     @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  parentCategoryId String?
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [categoryId])
  subCategories    Category[] @relation("SubCategories")
  products         Product[]
}

model Product {
  productId     String         @id @default(uuid())
  productName   String         @unique
  description   String
  price         Float
  images        String[]       @default([])
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  stockQuantity Int
  categoryId    String?
  Cart          Cart[]
  Interactions  Interactions[]
  OrderItem     OrderItem[]
  category      Category?      @relation(fields: [categoryId], references: [categoryId])
  Review        Review[]
}

model User {
  userId       String         @id @default(uuid())
  email        String         @unique
  fullName     String
  password     String
  role         Role           @default(USER)
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Address      Address[]
  Cart         Cart[]
  Coupon       Coupon[]
  Interactions Interactions[]
  Order        Order[]
  Payment      Payment[]
  Review       Review[]
}

model Cart {
  cartId    String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [productId])
  user      User     @relation(fields: [userId], references: [userId])
}

model Interactions {
  interactId      String          @id @default(uuid())
  userId          String
  productId       String
  interactionType InteractionType
  timestamp       DateTime        @default(now())
  product         Product         @relation(fields: [productId], references: [productId])
  user            User            @relation(fields: [userId], references: [userId])
}

model Order {
  orderId     String      @id @default(uuid())
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
  userId      String
  totalAmount Float
  Coupon      Coupon[]
  user        User        @relation(fields: [userId], references: [userId])
  orderItems  OrderItem[]
  Payment     Payment[]
}

model OrderItem {
  orderItemId String   @id @default(uuid())
  quantity    Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String
  productId   String
  order       Order    @relation(fields: [orderId], references: [orderId])
  product     Product  @relation(fields: [productId], references: [productId])
}

model Address {
  addressId     String   @id @default(uuid())
  phoneNumber   String
  fullName      String
  streetAddress String
  wardId        String
  districtId    String
  cityId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  Ward          Ward     @relation(fields: [wardId], references: [wardId])
  District      District @relation(fields: [districtId], references: [districtId])
  City          City     @relation(fields: [cityId], references: [cityId])
  user          User     @relation(fields: [userId], references: [userId])
}

model Payment {
  paymentId   String   @id @default(uuid())
  paymentType String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  orderId     String
  order       Order    @relation(fields: [orderId], references: [orderId])
  user        User     @relation(fields: [userId], references: [userId])
}

model Review {
  reviewId  String   @id @default(uuid())
  review    String
  rating    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [productId])
  user      User     @relation(fields: [userId], references: [userId])
}

model Coupon {
  couponId   String   @id @default(uuid())
  couponCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  orderId    String
  order      Order    @relation(fields: [orderId], references: [orderId])
  user       User     @relation(fields: [userId], references: [userId])
}

model City {
  cityId    String     @id @default(uuid())
  name      String
  districts District[]
  Address   Address[]
}

model District {
  districtId String    @id @default(uuid())
  name       String
  cityId     String
  city       City      @relation(fields: [cityId], references: [cityId])
  wards      Ward[]
  Address    Address[]
}

model Ward {
  wardId     String    @id @default(uuid())
  name       String
  districtId String
  district   District  @relation(fields: [districtId], references: [districtId])
  Address    Address[]
}

enum Role {
  USER
  ADMIN
}

enum InteractionType {
  VIEW
  PURCHASE
  REVIEW
}
