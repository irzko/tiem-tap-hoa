generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearch"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Category {
  categoryId       String     @id @default(uuid())
  categoryName     String     @unique
  createdAt        DateTime   @default(now())
  updatedAt        DateTime   @updatedAt
  parentCategoryId String?
  parentCategory   Category?  @relation("SubCategories", fields: [parentCategoryId], references: [categoryId])
  subCategories    Category[] @relation("SubCategories")
  products         Product[]
}

model Product {
  productId     String        @id @default(uuid())
  productName   String        @unique
  description   String
  price         Float
  gender        String?
  dateOfBirth   DateTime?
  images        String[]      @default([])
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  stockQuantity Int
  categoryId    String?
  Cart          Cart[]
  Interaction   Interaction[]
  orderDetail   OrderDetail[]
  category      Category?     @relation(fields: [categoryId], references: [categoryId])
  Review        Review[]
}

model User {
  userId             String               @id @default(uuid())
  email              String               @unique
  fullName           String
  password           String
  role               Role                 @default(USER)
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  defaultAddressId   String?
  defaultPaymentId   String?
  Address            Address[]
  Cart               Cart[]
  Coupon             Coupon[]
  Interaction        Interaction[]
  Order              Order[]
  Review             Review[]
  OrderStatusHistory OrderStatusHistory[]
  Usefulness         Usefulness[]
  Participant        Participant[]
  Message            Message[]
}

model Cart {
  cartId    String   @id @default(uuid())
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  userId    String
  productId String
  product   Product  @relation(fields: [productId], references: [productId])
  user      User     @relation(fields: [userId], references: [userId])
}

model Interaction {
  interactId      String          @id @default(uuid())
  userId          String
  productId       String
  interactionType InteractionType
  timestamp       DateTime        @default(now())
  product         Product         @relation(fields: [productId], references: [productId])
  user            User            @relation(fields: [userId], references: [userId])
}

model Order {
  orderId            String               @id @default(uuid())
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @updatedAt
  userId             String
  totalAmount        Float
  Coupon             Coupon[]
  addressId          String
  orderDetails       OrderDetail[]
  paymentMethod      PaymentMethod?
  statusId           String
  OrderStatusHistory OrderStatusHistory[]
  user               User                 @relation(fields: [userId], references: [userId])
  address            Address              @relation(fields: [addressId], references: [addressId])
  orderStatus        OrderStatus          @relation(fields: [statusId], references: [statusId])
}

model OrderStatus {
  statusId String  @id
  status   String
  orders   Order[]
}

model OrderStatusHistory {
  orderStatusHistoryId String   @id @default(uuid())
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
  orderId              String
  statusId             String
  userId               String
  order                Order?   @relation(fields: [orderId], references: [orderId])
  user                 User     @relation(fields: [userId], references: [userId])
}

model OrderDetail {
  orderDetailId String   @id @default(uuid())
  quantity      Int
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  orderId       String
  productId     String
  order         Order    @relation(fields: [orderId], references: [orderId])
  product       Product  @relation(fields: [productId], references: [productId])
}

model PaymentMethod {
  paymentId   String   @id @default(uuid())
  paymentType String
  accountInfo String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  orderId     String   @unique
  order       Order    @relation(fields: [orderId], references: [orderId])
}

model Review {
  reviewId   String       @id @default(uuid())
  review     String
  rating     Int
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  userId     String
  productId  String
  product    Product      @relation(fields: [productId], references: [productId])
  user       User         @relation(fields: [userId], references: [userId])
  Usefulness Usefulness[]
}

model Usefulness {
  usefulnessId String   @id @default(uuid())
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  userId       String
  reviewId     String
  review       Review   @relation(fields: [reviewId], references: [reviewId])
  user         User     @relation(fields: [userId], references: [userId])
}


model Coupon {
  couponId   String   @id @default(uuid())
  couponCode String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  userId     String
  orderId    String
  order      Order    @relation(fields: [orderId], references: [orderId])
  user       User     @relation(fields: [userId], references: [userId])
}

model City {
  cityId    String     @id @default(uuid())
  name      String
  districts District[]
  Address   Address[]
}

model District {
  districtId String    @id @default(uuid())
  name       String
  cityId     String
  city       City      @relation(fields: [cityId], references: [cityId])
  wards      Ward[]
  Address    Address[]
}

model Ward {
  wardId     String    @id @default(uuid())
  name       String
  districtId String
  Address    Address[]
  district   District  @relation(fields: [districtId], references: [districtId])
}

model Address {
  addressId     String   @id @default(uuid())
  phoneNumber   String
  fullName      String
  streetAddress String
  wardId        String
  districtId    String
  cityId        String
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  userId        String
  user          User     @relation(fields: [userId], references: [userId])
  ward          Ward     @relation(fields: [wardId], references: [wardId])
  district      District @relation(fields: [districtId], references: [districtId])
  city          City     @relation(fields: [cityId], references: [cityId])
  Order         Order[]
}

enum Role {
  USER
  ADMIN
}

enum InteractionType {
  VIEW
  PURCHASE
  REVIEW
}

model Conversation {
  conversationId String        @id @default(uuid())
  createdAt      DateTime      @default(now())
  updatedAt      DateTime      @updatedAt
  messages       Message[]
  participants   Participant[]
}

model Message {
  messageId      String       @id @default(uuid())
  content        String
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversationId String
  senderId       String
  conversation   Conversation @relation(fields: [conversationId], references: [conversationId])
  sender         User         @relation(fields: [senderId], references: [userId])
}

model Participant {
  participantId  String       @id @default(uuid())
  createdAt      DateTime     @default(now())
  updatedAt      DateTime     @updatedAt
  conversationId String
  userId         String
  conversation   Conversation @relation(fields: [conversationId], references: [conversationId])
  user           User         @relation(fields: [userId], references: [userId])
}
