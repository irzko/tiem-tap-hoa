generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Order {
  id           Int            @id @default(autoincrement())
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         Users          @relation(fields: [userId], references: [userId])
  OrderAddress OrderAddress[]
  OrderItem    OrderItem[]
  OrderPayment OrderPayment[]
  OrderStatus  OrderStatus[]
  PaymentItem  PaymentItem[]
}

model OrderItem {
  id              Int               @id @default(autoincrement())
  orderId         Int
  productId       Int
  quantity        Int
  createdAt       DateTime          @default(now())
  updatedAt       DateTime          @updatedAt
  order           Order             @relation(fields: [orderId], references: [id])
  product         Products          @relation(fields: [productId], references: [product_id])
  OrderItemStatus OrderItemStatus[]
}

model Cart {
  id        Int        @id @default(autoincrement())
  userId    Int
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt
  user      Users      @relation(fields: [userId], references: [userId])
  CartItem  CartItem[]
}

model CartItem {
  id        Int      @id @default(autoincrement())
  cartId    Int
  productId Int
  quantity  Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  cart      Cart     @relation(fields: [cartId], references: [id])
  product   Products @relation(fields: [productId], references: [product_id])
}

model Address {
  id           Int            @id @default(autoincrement())
  userId       Int
  address      String
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  user         Users          @relation(fields: [userId], references: [userId])
  OrderAddress OrderAddress[]
}

model Payment {
  id           Int            @id @default(autoincrement())
  userId       Int
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  OrderPayment OrderPayment[]
  user         Users          @relation(fields: [userId], references: [userId])
  PaymentItem  PaymentItem[]
}

model PaymentItem {
  id        Int      @id @default(autoincrement())
  paymentId Int
  orderId   Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

model Review {
  id        Int      @id @default(autoincrement())
  userId    Int
  productId Int
  rating    Int
  comment   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  product   Products @relation(fields: [productId], references: [product_id])
  user      Users    @relation(fields: [userId], references: [userId])
}

model Coupon {
  id         Int          @id @default(autoincrement())
  code       String       @unique
  discount   Float
  createdAt  DateTime     @default(now())
  updatedAt  DateTime     @updatedAt
  CouponUser CouponUser[]
}

model CouponUser {
  id        Int      @id @default(autoincrement())
  couponId  Int
  userId    Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  coupon    Coupon   @relation(fields: [couponId], references: [id])
  user      Users    @relation(fields: [userId], references: [userId])
}

model Notification {
  id        Int      @id @default(autoincrement())
  userId    Int
  message   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user      Users    @relation(fields: [userId], references: [userId])
}

model OrderStatus {
  id        Int      @id @default(autoincrement())
  orderId   Int
  status    String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
}

model OrderPayment {
  id        Int      @id @default(autoincrement())
  orderId   Int
  paymentId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  order     Order    @relation(fields: [orderId], references: [id])
  payment   Payment  @relation(fields: [paymentId], references: [id])
}

model OrderAddress {
  id        Int      @id @default(autoincrement())
  orderId   Int
  addressId Int
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  address   Address  @relation(fields: [addressId], references: [id])
  order     Order    @relation(fields: [orderId], references: [id])
}

model OrderItemStatus {
  id          Int       @id @default(autoincrement())
  orderItemId Int
  status      String
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  orderItem   OrderItem @relation(fields: [orderItemId], references: [id])
}

model Categories {
  categoryId   Int             @id(map: "CategoryGroup_pkey") @default(autoincrement())
  categoryName String          @unique(map: "CategoryGroup_name_key")
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @updatedAt
  Subcategories Subcategories[]
}

model Products {
  product_id                        Int               @id(map: "Product_pkey") @default(autoincrement())
  product_name                      String            @unique(map: "Product_name_key")
  description                       String
  price                             Float
  image                             String
  subsubcategory_id                 Int
  createdAt                         DateTime          @default(now())
  updatedAt                         DateTime          @updatedAt
  subsubcategoriesSubsubcategory_id Int?
  CartItem                          CartItem[]
  OrderItem                         OrderItem[]
  Subsubcategories                  Subsubcategories? @relation(fields: [subsubcategoriesSubsubcategory_id], references: [subsubcategory_id])
  Review                            Review[]
}

model Subcategories {
  subcategory_id   Int                @id(map: "Category_pkey") @default(autoincrement())
  subcategory_name String             @unique(map: "Category_name_key")
  createdAt        DateTime           @default(now())
  updatedAt        DateTime           @updatedAt
  categoryId      Int
  Categories       Categories         @relation(fields: [categoryId], references: [categoryId], map: "Category_categoryGroupId_fkey")
  Subsubcategories Subsubcategories[]
}

model Subsubcategories {
  subsubcategory_id   Int           @id(map: "Subcategory_pkey") @default(autoincrement())
  subsubcategory_name String        @unique(map: "Subcategory_name_key")
  createdAt           DateTime      @default(now())
  updatedAt           DateTime      @updatedAt
  subcategory_id      Int
  Products            Products[]
  Subcategories       Subcategories @relation(fields: [subcategory_id], references: [subcategory_id], map: "Subcategory_subcategoryId_fkey")
}

model Users {
  userId      String            @id(map: "User_pkey") @default(cuid())
  email        String         @unique(map: "User_email_key")
  fullName     String
  password     String
  phoneNumber        String?
  role         String         @default("USER")
  createdAt    DateTime       @default(now())
  updatedAt    DateTime       @updatedAt
  Address      Address[]
  Cart         Cart[]
  CouponUser   CouponUser[]
  Notification Notification[]
  Order        Order[]
  Payment      Payment[]
  Review       Review[]
}
